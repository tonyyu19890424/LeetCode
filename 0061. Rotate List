Given the head of a linked list, rotate the list to the right by k places.

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var rotateRight = function(head, k) {
    if(!head) return null;
    let n=0;
    let cur=head;
    while(cur){
        n++;
        cur=cur.next;
    }
    k%=n;
    let fast=head,slow=head;
    for(let i=0;i<k;i++){
        if(fast) fast=fast.next;
    }
    if(!fast) return head;
    while(fast.next){
        fast=fast.next;
        slow=slow.next;
    }
    fast.next=head;
    fast=slow.next;
    slow.next=null;
    return fast;
};
